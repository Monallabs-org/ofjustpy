{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ofjustpy Ofjustpy is an extension and wrapper to Justpy-Svelte -- a webdevelopment framework in python. Ofjustpy offers several enhancments to Justpy. Most prominent being that ofjustpy enables a functional bottom-up approach toward building a webpage. The claim is that this leads to a simpler more intutive codebase along with better resuablity. Additionally, it provides 1. hooks that automatically track all the created components 2. a mechanisum to organize components within a non-dom hierarchical context 3. use svelte as the underlying frontend javascript engine 4. ability to build higher order components using ofjustpy framework, tailwind and svelte. 5. Tailwind tags are first class python expressions allowing complex manipulation of styles. Description/Usage A demo example -- for the impatient ones import ofjustpy as oj from py_tailwind_utils import * from addict_tracking_changes import Dict def wp_hello_world(request): session_id = request.session_id session_manager = oj.get_session_manager(session_id) stubStore = session_manager.stubStore with oj.sessionctx(session_manager): with session_manager.uictx(\"header\") as headerCtx: title_ = oj.Title_(\"title\", \"A hello world page\", pcp=[bg/pink/\"100/20\"]) with session_manager.uictx(\"body\") as bodyCtx: body_ = oj.Halign_( oj.Prose_(\"greeting\", \"Hello world! This page was written using ofjustpy python framework \", pcp=[fz.lg, shadow._, shadow/gray/400, ta.center]), pcp=[mr/st/8] ) with session_manager.uictx(\"footer\") as bodyCtx: footer_ = oj.Halign_( oj.Prose_(\"depart\", \"Thats all folks! Hope you got the broad drift of this framework\", pcp=[mr/st/64, ta.right]), \"end\" ) oj.Container_(\"tlc\", cgens = [title_, body_, footer_], pcp=[H/\"screen\", bg/gray/\"100/20\"]) wp = oj.WebPage_(\"wp_hello_world\", cgens= [stubStore.tlc], title=\"Readme demo page\")() return wp app = oj.build_app() app.add_jproute(\"/\", wp_hello_world) The webpage will be rendered as: The key takeaway is that the webpage is build bottom up. First, the most atomic components are declared. Then higher order components are declared that contain previously declared component. The components are weaved together at the last step when the webpage instance is requested. See here(todo) for a more comprehensive demo that showcases all the basic (or html components) and higher order components built using tailwind and svelte. Advanced notes Checkout to see the list all htmlcomponent supported and handling events checkout ofjustpy-extn for more advanced components (such as json navigator) build using ofjustpy ( coming up ) Coming soon: A comprehensive tutorial/guide EndNotes Homepage: webworks.monallabs.in/ofjustpy Developed by: webworks.monallabs.in Source Code: https://github.com/Monallabs-org/ofjustpy","title":"Introduction"},{"location":"#ofjustpy","text":"Ofjustpy is an extension and wrapper to Justpy-Svelte -- a webdevelopment framework in python. Ofjustpy offers several enhancments to Justpy. Most prominent being that ofjustpy enables a functional bottom-up approach toward building a webpage. The claim is that this leads to a simpler more intutive codebase along with better resuablity. Additionally, it provides 1. hooks that automatically track all the created components 2. a mechanisum to organize components within a non-dom hierarchical context 3. use svelte as the underlying frontend javascript engine 4. ability to build higher order components using ofjustpy framework, tailwind and svelte. 5. Tailwind tags are first class python expressions allowing complex manipulation of styles.","title":"Ofjustpy"},{"location":"#descriptionusage","text":"","title":"Description/Usage"},{"location":"#a-demo-example-for-the-impatient-ones","text":"import ofjustpy as oj from py_tailwind_utils import * from addict_tracking_changes import Dict def wp_hello_world(request): session_id = request.session_id session_manager = oj.get_session_manager(session_id) stubStore = session_manager.stubStore with oj.sessionctx(session_manager): with session_manager.uictx(\"header\") as headerCtx: title_ = oj.Title_(\"title\", \"A hello world page\", pcp=[bg/pink/\"100/20\"]) with session_manager.uictx(\"body\") as bodyCtx: body_ = oj.Halign_( oj.Prose_(\"greeting\", \"Hello world! This page was written using ofjustpy python framework \", pcp=[fz.lg, shadow._, shadow/gray/400, ta.center]), pcp=[mr/st/8] ) with session_manager.uictx(\"footer\") as bodyCtx: footer_ = oj.Halign_( oj.Prose_(\"depart\", \"Thats all folks! Hope you got the broad drift of this framework\", pcp=[mr/st/64, ta.right]), \"end\" ) oj.Container_(\"tlc\", cgens = [title_, body_, footer_], pcp=[H/\"screen\", bg/gray/\"100/20\"]) wp = oj.WebPage_(\"wp_hello_world\", cgens= [stubStore.tlc], title=\"Readme demo page\")() return wp app = oj.build_app() app.add_jproute(\"/\", wp_hello_world) The webpage will be rendered as: The key takeaway is that the webpage is build bottom up. First, the most atomic components are declared. Then higher order components are declared that contain previously declared component. The components are weaved together at the last step when the webpage instance is requested. See here(todo) for a more comprehensive demo that showcases all the basic (or html components) and higher order components built using tailwind and svelte.","title":"A demo example -- for the impatient ones"},{"location":"#advanced-notes","text":"Checkout to see the list all htmlcomponent supported and handling events checkout ofjustpy-extn for more advanced components (such as json navigator) build using ofjustpy ( coming up ) Coming soon: A comprehensive tutorial/guide","title":"Advanced notes"},{"location":"#endnotes","text":"Homepage: webworks.monallabs.in/ofjustpy Developed by: webworks.monallabs.in Source Code: https://github.com/Monallabs-org/ofjustpy","title":"EndNotes"},{"location":"API/","text":"Ofjustpy API reference ~~ This page is still under development ~~ This just gives a list of APIs to build html components. For details checkout htmlcomponents.py . For usage checkout programming with ofjustpy . Notable Html Components Button_ Select_ Container Html components These are div components annotated with tailwind classes to perform container functionality. StackV_ place components stacked vertically StackH_ place components stacked horizontally StackW_ place components stacked horizontally but wrap around StackD_ A special component that mimics the deck of cards. StackG_ Place components in a grid of given row and sizes Custom/Opiniated/Composed Components These components are either derived by composing basic htmlcomponents or by annotating tailwind constructs to basic htmlcomponents. SubheadingBanner_ LabeledInput_ Checkbox_ CheckboxInput_ Subsection_ Prose_ KeyValue_ SubsubheadingBanner_ Subsubsection_ Barpanel_ WithBanner_ Halign_ Valign_ Align_ SubTitle_ Title_ Tr_ Table_ InputJBtn_ Components API InputChangeOnly_ ToggleBtn_ Slider_ ColorSelector_ Form_ Webpage WebPage_","title":"API"},{"location":"API/#ofjustpy-api-reference","text":"~~ This page is still under development ~~ This just gives a list of APIs to build html components. For details checkout htmlcomponents.py . For usage checkout programming with ofjustpy .","title":"Ofjustpy API reference"},{"location":"API/#notable-html-components","text":"","title":"Notable Html Components"},{"location":"API/#button_","text":"","title":"Button_"},{"location":"API/#select_","text":"","title":"Select_"},{"location":"API/#container-html-components","text":"These are div components annotated with tailwind classes to perform container functionality.","title":"Container Html components"},{"location":"API/#stackv_","text":"place components stacked vertically","title":"StackV_"},{"location":"API/#stackh_","text":"place components stacked horizontally","title":"StackH_"},{"location":"API/#stackw_","text":"place components stacked horizontally but wrap around","title":"StackW_"},{"location":"API/#stackd_","text":"A special component that mimics the deck of cards.","title":"StackD_"},{"location":"API/#stackg_","text":"Place components in a grid of given row and sizes","title":"StackG_"},{"location":"API/#customopiniatedcomposed-components","text":"These components are either derived by composing basic htmlcomponents or by annotating tailwind constructs to basic htmlcomponents.","title":"Custom/Opiniated/Composed Components"},{"location":"API/#subheadingbanner_","text":"","title":"SubheadingBanner_"},{"location":"API/#labeledinput_","text":"","title":"LabeledInput_"},{"location":"API/#checkbox_","text":"","title":"Checkbox_"},{"location":"API/#checkboxinput_","text":"","title":"CheckboxInput_"},{"location":"API/#subsection_","text":"","title":"Subsection_"},{"location":"API/#prose_","text":"","title":"Prose_"},{"location":"API/#keyvalue_","text":"","title":"KeyValue_"},{"location":"API/#subsubheadingbanner_","text":"","title":"SubsubheadingBanner_"},{"location":"API/#subsubsection_","text":"","title":"Subsubsection_"},{"location":"API/#barpanel_","text":"","title":"Barpanel_"},{"location":"API/#withbanner_","text":"","title":"WithBanner_"},{"location":"API/#halign_","text":"","title":"Halign_"},{"location":"API/#valign_","text":"","title":"Valign_"},{"location":"API/#align_","text":"","title":"Align_"},{"location":"API/#subtitle_","text":"","title":"SubTitle_"},{"location":"API/#title_","text":"","title":"Title_"},{"location":"API/#tr_","text":"","title":"Tr_"},{"location":"API/#table_","text":"","title":"Table_"},{"location":"API/#inputjbtn_","text":"","title":"InputJBtn_"},{"location":"API/#components-api","text":"","title":"Components API"},{"location":"API/#inputchangeonly_","text":"","title":"InputChangeOnly_"},{"location":"API/#togglebtn_","text":"","title":"ToggleBtn_"},{"location":"API/#slider_","text":"","title":"Slider_"},{"location":"API/#colorselector_","text":"","title":"ColorSelector_"},{"location":"API/#form_","text":"","title":"Form_"},{"location":"API/#webpage","text":"","title":"Webpage"},{"location":"API/#webpage_","text":"","title":"WebPage_"},{"location":"data_model/","text":"config = Config(\".env\") models_pymodule_path = config(\"models_pymodule\", default=\"models\") user_model_name = config(\"user_model\", default = \"User\") Advanced config options sqlalchemy_base_name = config(\"sqlalchemy_base_name\", default = \"Base\")","title":"Data model"},{"location":"data_model/#advanced-config-options","text":"sqlalchemy_base_name = config(\"sqlalchemy_base_name\", default = \"Base\")","title":"Advanced config options"},{"location":"examples/","text":"Getting Started Handling Events","title":"Getting Started"},{"location":"examples/#getting-started","text":"","title":"Getting Started"},{"location":"examples/#handling-events","text":"","title":"Handling Events"},{"location":"form/","text":"All about wtforms checkers","title":"Form"},{"location":"ofjustpy_programming/","text":"Ofjustpy programming paradigm When building a webapp, the first goal is to build what is called document-object-model or DOM tree. The browser engine will use this DOM-tree to render out the webpage. Background DOM tree In its simplest sense, a DOM tree is collection HTML components arranged in a tree structure which is defind using parent-child relationship between components. Object-oriented/imperative vs. functional way towards building a DOM tree In Justpy, and most other object-oriented/imperative programming, express the DOM tree in a imperative object-oriented style. Here, one would create a button object (an instance of Button type) and add it to some parent component (another instance some html component type): mybtn = Button(a=parent) . The html equivalent for the above statement is <parent> <button> </button> </parent> Two points to note here: the creation of button instance is coupled/tied to building the DOM tree (or a link of the tree). Ofjustpy doesn't follow the classic object-oriented impreative style. Instead ofjustpy follows a functional paradigm, where object instantiation is decoupled from DOM creation. Functional approach for DOM tree: Stubs and containers In Ofjustpy, instead of creating an instance of a component type, you first create/instantiate a component stubs . What are component stubs ? Stubs are functions that when invoked will generate the respective component. We follow the convention that capital letter name with \" \" suffix referes to stub generators while names starting with small letters and ending with \" \" suffix is the stub. The code example below illustrates this with example: button_ = oj.Button_(\"mybtn\", text=\"Submit\") Here oj.Button_ is a stub generator while button_ is the generated stub. Once we have generated the stubs, we can define parent-child relationship to build the the DOM tree. In ofjustpy, stub generator functions have an argument called cgens . The cgens takes in the list/iterator over stubs that will the child components of that component. As example to illustrate: lots_of_buttons = [oj.Button_(f\"btn_{i}\", ... ) for i in range(0,10) ] oj.Div_(\"buttonpanel\", cgens = logs_of_buttons) In the above code, ofjustpy will create 10 buttons and make them child of a Div component. The ofjustpy component zoo Lets briefly familiarze with types of component present in current ofjustpy ecosytem. We have all the usual","title":"Ofjustpy Programming Paradigm"},{"location":"ofjustpy_programming/#ofjustpy-programming-paradigm","text":"When building a webapp, the first goal is to build what is called document-object-model or DOM tree. The browser engine will use this DOM-tree to render out the webpage.","title":"Ofjustpy programming paradigm"},{"location":"ofjustpy_programming/#background","text":"","title":"Background"},{"location":"ofjustpy_programming/#dom-tree","text":"In its simplest sense, a DOM tree is collection HTML components arranged in a tree structure which is defind using parent-child relationship between components.","title":"DOM tree"},{"location":"ofjustpy_programming/#object-orientedimperative-vs-functional-way-towards-building-a-dom-tree","text":"In Justpy, and most other object-oriented/imperative programming, express the DOM tree in a imperative object-oriented style. Here, one would create a button object (an instance of Button type) and add it to some parent component (another instance some html component type): mybtn = Button(a=parent) . The html equivalent for the above statement is <parent> <button> </button> </parent> Two points to note here: the creation of button instance is coupled/tied to building the DOM tree (or a link of the tree). Ofjustpy doesn't follow the classic object-oriented impreative style. Instead ofjustpy follows a functional paradigm, where object instantiation is decoupled from DOM creation.","title":"Object-oriented/imperative vs. functional way towards building a DOM tree"},{"location":"ofjustpy_programming/#functional-approach-for-dom-tree-stubs-and-containers","text":"In Ofjustpy, instead of creating an instance of a component type, you first create/instantiate a component stubs . What are component stubs ? Stubs are functions that when invoked will generate the respective component. We follow the convention that capital letter name with \" \" suffix referes to stub generators while names starting with small letters and ending with \" \" suffix is the stub. The code example below illustrates this with example: button_ = oj.Button_(\"mybtn\", text=\"Submit\") Here oj.Button_ is a stub generator while button_ is the generated stub. Once we have generated the stubs, we can define parent-child relationship to build the the DOM tree. In ofjustpy, stub generator functions have an argument called cgens . The cgens takes in the list/iterator over stubs that will the child components of that component. As example to illustrate: lots_of_buttons = [oj.Button_(f\"btn_{i}\", ... ) for i in range(0,10) ] oj.Div_(\"buttonpanel\", cgens = logs_of_buttons) In the above code, ofjustpy will create 10 buttons and make them child of a Div component.","title":"Functional approach for DOM tree: Stubs and containers"},{"location":"ofjustpy_programming/#the-ofjustpy-component-zoo","text":"Lets briefly familiarze with types of component present in current ofjustpy ecosytem. We have all the usual","title":"The ofjustpy component zoo"},{"location":"tracker_components/","text":"dss","title":"Tracker components"}]}